#include <core/memory.h>

GTEST_TEST(memory, align_address)
{

    // Non constant
    {
        uptr result11 = hud::memory::align_address(0x00000001, 1);
        hud_assert_eq(result11, uptr {0x00000001});
        uptr result21 = hud::memory::align_address(0x00000002, 1);
        hud_assert_eq(result21, uptr {0x00000002});
        uptr result31 = hud::memory::align_address(0x00000003, 1);
        hud_assert_eq(result31, uptr {0x00000003});
        uptr result41 = hud::memory::align_address(0x00000004, 1);
        hud_assert_eq(result41, uptr {0x00000004});
        uptr result51 = hud::memory::align_address(0x00000005, 1);
        hud_assert_eq(result51, uptr {0x00000005});
        uptr result61 = hud::memory::align_address(0x00000006, 1);
        hud_assert_eq(result61, uptr {0x00000006});
        uptr result71 = hud::memory::align_address(0x00000007, 1);
        hud_assert_eq(result71, uptr {0x00000007});
        uptr result81 = hud::memory::align_address(0x00000008, 1);
        hud_assert_eq(result81, uptr {0x00000008});
        uptr result91 = hud::memory::align_address(0x00000009, 1);
        hud_assert_eq(result91, uptr {0x00000009});
        uptr resultA1 = hud::memory::align_address(0x0000000A, 1);
        hud_assert_eq(resultA1, uptr {0x0000000A});
        uptr resultB1 = hud::memory::align_address(0x0000000B, 1);
        hud_assert_eq(resultB1, uptr {0x0000000B});
        uptr resultC1 = hud::memory::align_address(0x0000000C, 1);
        hud_assert_eq(resultC1, uptr {0x0000000C});
        uptr resultD1 = hud::memory::align_address(0x0000000D, 1);
        hud_assert_eq(resultD1, uptr {0x0000000D});
        uptr resultE1 = hud::memory::align_address(0x0000000E, 1);
        hud_assert_eq(resultE1, uptr {0x0000000E});
        uptr resultF1 = hud::memory::align_address(0x0000000F, 1);
        hud_assert_eq(resultF1, uptr {0x0000000F});
        uptr result101 = hud::memory::align_address(0x00000010, 1);
        hud_assert_eq(result101, uptr {0x00000010});

        uptr result14 = hud::memory::align_address(0x00000001, 4);
        hud_assert_eq(result14, uptr {0x00000004});
        uptr result24 = hud::memory::align_address(0x00000002, 4);
        hud_assert_eq(result24, uptr {0x00000004});
        uptr result34 = hud::memory::align_address(0x00000003, 4);
        hud_assert_eq(result34, uptr {0x00000004});
        uptr result44 = hud::memory::align_address(0x00000004, 4);
        hud_assert_eq(result44, uptr {0x00000004});
        uptr result54 = hud::memory::align_address(0x00000005, 4);
        hud_assert_eq(result54, uptr {0x00000008});
        uptr result64 = hud::memory::align_address(0x00000006, 4);
        hud_assert_eq(result64, uptr {0x00000008});
        uptr result74 = hud::memory::align_address(0x00000007, 4);
        hud_assert_eq(result74, uptr {0x00000008});
        uptr result84 = hud::memory::align_address(0x00000008, 4);
        hud_assert_eq(result84, uptr {0x00000008});
        uptr result94 = hud::memory::align_address(0x00000009, 4);
        hud_assert_eq(result94, uptr {0x0000000C});
        uptr resultA4 = hud::memory::align_address(0x0000000A, 4);
        hud_assert_eq(resultA4, uptr {0x0000000C});
        uptr resultB4 = hud::memory::align_address(0x0000000B, 4);
        hud_assert_eq(resultB4, uptr {0x0000000C});
        uptr resultC4 = hud::memory::align_address(0x0000000C, 4);
        hud_assert_eq(resultC4, uptr {0x0000000C});
        uptr resultD4 = hud::memory::align_address(0x0000000D, 4);
        hud_assert_eq(resultD4, uptr {0x00000010});
        uptr resultE4 = hud::memory::align_address(0x0000000E, 4);
        hud_assert_eq(resultE4, uptr {0x00000010});
        uptr resultF4 = hud::memory::align_address(0x0000000F, 4);
        hud_assert_eq(resultF4, uptr {0x00000010});
        uptr result104 = hud::memory::align_address(0x00000010, 4);
        hud_assert_eq(result104, uptr {0x00000010});

        uptr result18 = hud::memory::align_address(0x00000001, 8);
        hud_assert_eq(result18, uptr {0x00000008});
        uptr result28 = hud::memory::align_address(0x00000002, 8);
        hud_assert_eq(result28, uptr {0x00000008});
        uptr result38 = hud::memory::align_address(0x00000003, 8);
        hud_assert_eq(result38, uptr {0x00000008});
        uptr result48 = hud::memory::align_address(0x00000004, 8);
        hud_assert_eq(result48, uptr {0x00000008});
        uptr result58 = hud::memory::align_address(0x00000005, 8);
        hud_assert_eq(result58, uptr {0x00000008});
        uptr result68 = hud::memory::align_address(0x00000006, 8);
        hud_assert_eq(result68, uptr {0x00000008});
        uptr result78 = hud::memory::align_address(0x00000007, 8);
        hud_assert_eq(result78, uptr {0x00000008});
        uptr result88 = hud::memory::align_address(0x00000008, 8);
        hud_assert_eq(result88, uptr {0x00000008});
        uptr result98 = hud::memory::align_address(0x00000009, 8);
        hud_assert_eq(result98, uptr {0x00000010});
        uptr resultA8 = hud::memory::align_address(0x0000000A, 8);
        hud_assert_eq(resultA8, uptr {0x00000010});
        uptr resultB8 = hud::memory::align_address(0x0000000B, 8);
        hud_assert_eq(resultB8, uptr {0x00000010});
        uptr resultC8 = hud::memory::align_address(0x0000000C, 8);
        hud_assert_eq(resultC8, uptr {0x00000010});
        uptr resultD8 = hud::memory::align_address(0x0000000D, 8);
        hud_assert_eq(resultD8, uptr {0x00000010});
        uptr resultE8 = hud::memory::align_address(0x0000000E, 8);
        hud_assert_eq(resultE8, uptr {0x00000010});
        uptr resultF8 = hud::memory::align_address(0x0000000F, 8);
        hud_assert_eq(resultF8, uptr {0x00000010});
        uptr result108 = hud::memory::align_address(0x00000010, 8);
        hud_assert_eq(result108, uptr {0x00000010});

        uptr result1C = hud::memory::align_address(0x00000001, 0xC);
        hud_assert_eq(result1C, uptr {0x00000004});
        uptr result2C = hud::memory::align_address(0x00000002, 0xC);
        hud_assert_eq(result2C, uptr {0x00000004});
        uptr result3C = hud::memory::align_address(0x00000003, 0xC);
        hud_assert_eq(result3C, uptr {0x00000004});
        uptr result4C = hud::memory::align_address(0x00000004, 0xC);
        hud_assert_eq(result4C, uptr {0x00000004});
        uptr result5C = hud::memory::align_address(0x00000005, 0xC);
        hud_assert_eq(result5C, uptr {0x00000010});
        uptr result6C = hud::memory::align_address(0x00000006, 0xC);
        hud_assert_eq(result6C, uptr {0x00000010});
        uptr result7C = hud::memory::align_address(0x00000007, 0xC);
        hud_assert_eq(result7C, uptr {0x00000010});
        uptr result8C = hud::memory::align_address(0x00000008, 0xC);
        hud_assert_eq(result8C, uptr {0x00000010});
        uptr result9C = hud::memory::align_address(0x00000009, 0xC);
        hud_assert_eq(result9C, uptr {0x00000014});
        uptr resultAC = hud::memory::align_address(0x0000000A, 0xC);
        hud_assert_eq(resultAC, uptr {0x00000014});
        uptr resultBC = hud::memory::align_address(0x0000000B, 0xC);
        hud_assert_eq(resultBC, uptr {0x00000014});
        uptr resultCC = hud::memory::align_address(0x0000000C, 0xC);
        hud_assert_eq(resultCC, uptr {0x00000014});
        uptr resultDC = hud::memory::align_address(0x0000000D, 0xC);
        hud_assert_eq(resultDC, uptr {0x00000010});
        uptr resultEC = hud::memory::align_address(0x0000000E, 0xC);
        hud_assert_eq(resultEC, uptr {0x00000010});
        uptr resultFC = hud::memory::align_address(0x0000000F, 0xC);
        hud_assert_eq(resultFC, uptr {0x00000010});
        uptr result10C = hud::memory::align_address(0x00000010, 0xC);
        hud_assert_eq(result10C, uptr {0x00000010});

        uptr result110 = hud::memory::align_address(0x00000001, 0x10);
        hud_assert_eq(result110, uptr {0x00000010});
        uptr result210 = hud::memory::align_address(0x00000002, 0x10);
        hud_assert_eq(result210, uptr {0x00000010});
        uptr result310 = hud::memory::align_address(0x00000003, 0x10);
        hud_assert_eq(result310, uptr {0x00000010});
        uptr result410 = hud::memory::align_address(0x00000004, 0x10);
        hud_assert_eq(result410, uptr {0x00000010});
        uptr result510 = hud::memory::align_address(0x00000005, 0x10);
        hud_assert_eq(result510, uptr {0x00000010});
        uptr result610 = hud::memory::align_address(0x00000006, 0x10);
        hud_assert_eq(result610, uptr {0x00000010});
        uptr result710 = hud::memory::align_address(0x00000007, 0x10);
        hud_assert_eq(result710, uptr {0x00000010});
        uptr result810 = hud::memory::align_address(0x00000008, 0x10);
        hud_assert_eq(result810, uptr {0x00000010});
        uptr result910 = hud::memory::align_address(0x00000009, 0x10);
        hud_assert_eq(result910, uptr {0x00000010});
        uptr resultA10 = hud::memory::align_address(0x0000000A, 0x10);
        hud_assert_eq(resultA10, uptr {0x00000010});
        uptr resultB10 = hud::memory::align_address(0x0000000B, 0x10);
        hud_assert_eq(resultB10, uptr {0x00000010});
        uptr resultC10 = hud::memory::align_address(0x0000000C, 0x10);
        hud_assert_eq(resultC10, uptr {0x00000010});
        uptr resultD10 = hud::memory::align_address(0x0000000D, 0x10);
        hud_assert_eq(resultD10, uptr {0x00000010});
        uptr resultE10 = hud::memory::align_address(0x0000000E, 0x10);
        hud_assert_eq(resultE10, uptr {0x00000010});
        uptr resultF10 = hud::memory::align_address(0x0000000F, 0x10);
        hud_assert_eq(resultF10, uptr {0x00000010});
        uptr result1010 = hud::memory::align_address(0x00000010, 0x10);
        hud_assert_eq(result1010, uptr {0x00000010});
    }

    // Constant
    {
        constexpr uptr result11 = hud::memory::align_address(0x00000001, 1);
        hud_assert_eq(result11, uptr {0x00000001});
        constexpr uptr result21 = hud::memory::align_address(0x00000002, 1);
        hud_assert_eq(result21, uptr {0x00000002});
        constexpr uptr result31 = hud::memory::align_address(0x00000003, 1);
        hud_assert_eq(result31, uptr {0x00000003});
        constexpr uptr result41 = hud::memory::align_address(0x00000004, 1);
        hud_assert_eq(result41, uptr {0x00000004});
        constexpr uptr result51 = hud::memory::align_address(0x00000005, 1);
        hud_assert_eq(result51, uptr {0x00000005});
        constexpr uptr result61 = hud::memory::align_address(0x00000006, 1);
        hud_assert_eq(result61, uptr {0x00000006});
        constexpr uptr result71 = hud::memory::align_address(0x00000007, 1);
        hud_assert_eq(result71, uptr {0x00000007});
        constexpr uptr result81 = hud::memory::align_address(0x00000008, 1);
        hud_assert_eq(result81, uptr {0x00000008});
        constexpr uptr result91 = hud::memory::align_address(0x00000009, 1);
        hud_assert_eq(result91, uptr {0x00000009});
        constexpr uptr resultA1 = hud::memory::align_address(0x0000000A, 1);
        hud_assert_eq(resultA1, uptr {0x0000000A});
        constexpr uptr resultB1 = hud::memory::align_address(0x0000000B, 1);
        hud_assert_eq(resultB1, uptr {0x0000000B});
        constexpr uptr resultC1 = hud::memory::align_address(0x0000000C, 1);
        hud_assert_eq(resultC1, uptr {0x0000000C});
        constexpr uptr resultD1 = hud::memory::align_address(0x0000000D, 1);
        hud_assert_eq(resultD1, uptr {0x0000000D});
        constexpr uptr resultE1 = hud::memory::align_address(0x0000000E, 1);
        hud_assert_eq(resultE1, uptr {0x0000000E});
        constexpr uptr resultF1 = hud::memory::align_address(0x0000000F, 1);
        hud_assert_eq(resultF1, uptr {0x0000000F});
        constexpr uptr result101 = hud::memory::align_address(0x00000010, 1);
        hud_assert_eq(result101, uptr {0x00000010});

        constexpr uptr result14 = hud::memory::align_address(0x00000001, 4);
        hud_assert_eq(result14, uptr {0x00000004});
        constexpr uptr result24 = hud::memory::align_address(0x00000002, 4);
        hud_assert_eq(result24, uptr {0x00000004});
        constexpr uptr result34 = hud::memory::align_address(0x00000003, 4);
        hud_assert_eq(result34, uptr {0x00000004});
        constexpr uptr result44 = hud::memory::align_address(0x00000004, 4);
        hud_assert_eq(result44, uptr {0x00000004});
        constexpr uptr result54 = hud::memory::align_address(0x00000005, 4);
        hud_assert_eq(result54, uptr {0x00000008});
        constexpr uptr result64 = hud::memory::align_address(0x00000006, 4);
        hud_assert_eq(result64, uptr {0x00000008});
        constexpr uptr result74 = hud::memory::align_address(0x00000007, 4);
        hud_assert_eq(result74, uptr {0x00000008});
        constexpr uptr result84 = hud::memory::align_address(0x00000008, 4);
        hud_assert_eq(result84, uptr {0x00000008});
        constexpr uptr result94 = hud::memory::align_address(0x00000009, 4);
        hud_assert_eq(result94, uptr {0x0000000C});
        constexpr uptr resultA4 = hud::memory::align_address(0x0000000A, 4);
        hud_assert_eq(resultA4, uptr {0x0000000C});
        constexpr uptr resultB4 = hud::memory::align_address(0x0000000B, 4);
        hud_assert_eq(resultB4, uptr {0x0000000C});
        constexpr uptr resultC4 = hud::memory::align_address(0x0000000C, 4);
        hud_assert_eq(resultC4, uptr {0x0000000C});
        constexpr uptr resultD4 = hud::memory::align_address(0x0000000D, 4);
        hud_assert_eq(resultD4, uptr {0x00000010});
        constexpr uptr resultE4 = hud::memory::align_address(0x0000000E, 4);
        hud_assert_eq(resultE4, uptr {0x00000010});
        constexpr uptr resultF4 = hud::memory::align_address(0x0000000F, 4);
        hud_assert_eq(resultF4, uptr {0x00000010});
        constexpr uptr result104 = hud::memory::align_address(0x00000010, 4);
        hud_assert_eq(result104, uptr {0x00000010});

        constexpr uptr result18 = hud::memory::align_address(0x00000001, 8);
        hud_assert_eq(result18, uptr {0x00000008});
        constexpr uptr result28 = hud::memory::align_address(0x00000002, 8);
        hud_assert_eq(result28, uptr {0x00000008});
        constexpr uptr result38 = hud::memory::align_address(0x00000003, 8);
        hud_assert_eq(result38, uptr {0x00000008});
        constexpr uptr result48 = hud::memory::align_address(0x00000004, 8);
        hud_assert_eq(result48, uptr {0x00000008});
        constexpr uptr result58 = hud::memory::align_address(0x00000005, 8);
        hud_assert_eq(result58, uptr {0x00000008});
        constexpr uptr result68 = hud::memory::align_address(0x00000006, 8);
        hud_assert_eq(result68, uptr {0x00000008});
        constexpr uptr result78 = hud::memory::align_address(0x00000007, 8);
        hud_assert_eq(result78, uptr {0x00000008});
        constexpr uptr result88 = hud::memory::align_address(0x00000008, 8);
        hud_assert_eq(result88, uptr {0x00000008});
        constexpr uptr result98 = hud::memory::align_address(0x00000009, 8);
        hud_assert_eq(result98, uptr {0x00000010});
        constexpr uptr resultA8 = hud::memory::align_address(0x0000000A, 8);
        hud_assert_eq(resultA8, uptr {0x00000010});
        constexpr uptr resultB8 = hud::memory::align_address(0x0000000B, 8);
        hud_assert_eq(resultB8, uptr {0x00000010});
        constexpr uptr resultC8 = hud::memory::align_address(0x0000000C, 8);
        hud_assert_eq(resultC8, uptr {0x00000010});
        constexpr uptr resultD8 = hud::memory::align_address(0x0000000D, 8);
        hud_assert_eq(resultD8, uptr {0x00000010});
        constexpr uptr resultE8 = hud::memory::align_address(0x0000000E, 8);
        hud_assert_eq(resultE8, uptr {0x00000010});
        constexpr uptr resultF8 = hud::memory::align_address(0x0000000F, 8);
        hud_assert_eq(resultF8, uptr {0x00000010});
        constexpr uptr result108 = hud::memory::align_address(0x00000010, 8);
        hud_assert_eq(result108, uptr {0x00000010});

        constexpr uptr result1C = hud::memory::align_address(0x00000001, 0xC);
        hud_assert_eq(result1C, uptr {0x00000004});
        constexpr uptr result2C = hud::memory::align_address(0x00000002, 0xC);
        hud_assert_eq(result2C, uptr {0x00000004});
        constexpr uptr result3C = hud::memory::align_address(0x00000003, 0xC);
        hud_assert_eq(result3C, uptr {0x00000004});
        constexpr uptr result4C = hud::memory::align_address(0x00000004, 0xC);
        hud_assert_eq(result4C, uptr {0x00000004});
        constexpr uptr result5C = hud::memory::align_address(0x00000005, 0xC);
        hud_assert_eq(result5C, uptr {0x00000010});
        constexpr uptr result6C = hud::memory::align_address(0x00000006, 0xC);
        hud_assert_eq(result6C, uptr {0x00000010});
        constexpr uptr result7C = hud::memory::align_address(0x00000007, 0xC);
        hud_assert_eq(result7C, uptr {0x00000010});
        constexpr uptr result8C = hud::memory::align_address(0x00000008, 0xC);
        hud_assert_eq(result8C, uptr {0x00000010});
        constexpr uptr result9C = hud::memory::align_address(0x00000009, 0xC);
        hud_assert_eq(result9C, uptr {0x00000014});
        constexpr uptr resultAC = hud::memory::align_address(0x0000000A, 0xC);
        hud_assert_eq(resultAC, uptr {0x00000014});
        constexpr uptr resultBC = hud::memory::align_address(0x0000000B, 0xC);
        hud_assert_eq(resultBC, uptr {0x00000014});
        constexpr uptr resultCC = hud::memory::align_address(0x0000000C, 0xC);
        hud_assert_eq(resultCC, uptr {0x00000014});
        constexpr uptr resultDC = hud::memory::align_address(0x0000000D, 0xC);
        hud_assert_eq(resultDC, uptr {0x00000010});
        constexpr uptr resultEC = hud::memory::align_address(0x0000000E, 0xC);
        hud_assert_eq(resultEC, uptr {0x00000010});
        constexpr uptr resultFC = hud::memory::align_address(0x0000000F, 0xC);
        hud_assert_eq(resultFC, uptr {0x00000010});
        constexpr uptr result10C = hud::memory::align_address(0x00000010, 0xC);
        hud_assert_eq(result10C, uptr {0x00000010});

        constexpr uptr result110 = hud::memory::align_address(0x00000001, 0x10);
        hud_assert_eq(result110, uptr {0x00000010});
        constexpr uptr result210 = hud::memory::align_address(0x00000002, 0x10);
        hud_assert_eq(result210, uptr {0x00000010});
        constexpr uptr result310 = hud::memory::align_address(0x00000003, 0x10);
        hud_assert_eq(result310, uptr {0x00000010});
        constexpr uptr result410 = hud::memory::align_address(0x00000004, 0x10);
        hud_assert_eq(result410, uptr {0x00000010});
        constexpr uptr result510 = hud::memory::align_address(0x00000005, 0x10);
        hud_assert_eq(result510, uptr {0x00000010});
        constexpr uptr result610 = hud::memory::align_address(0x00000006, 0x10);
        hud_assert_eq(result610, uptr {0x00000010});
        constexpr uptr result710 = hud::memory::align_address(0x00000007, 0x10);
        hud_assert_eq(result710, uptr {0x00000010});
        constexpr uptr result810 = hud::memory::align_address(0x00000008, 0x10);
        hud_assert_eq(result810, uptr {0x00000010});
        constexpr uptr result910 = hud::memory::align_address(0x00000009, 0x10);
        hud_assert_eq(result910, uptr {0x00000010});
        constexpr uptr resultA10 = hud::memory::align_address(0x0000000A, 0x10);
        hud_assert_eq(resultA10, uptr {0x00000010});
        constexpr uptr resultB10 = hud::memory::align_address(0x0000000B, 0x10);
        hud_assert_eq(resultB10, uptr {0x00000010});
        constexpr uptr resultC10 = hud::memory::align_address(0x0000000C, 0x10);
        hud_assert_eq(resultC10, uptr {0x00000010});
        constexpr uptr resultD10 = hud::memory::align_address(0x0000000D, 0x10);
        hud_assert_eq(resultD10, uptr {0x00000010});
        constexpr uptr resultE10 = hud::memory::align_address(0x0000000E, 0x10);
        hud_assert_eq(resultE10, uptr {0x00000010});
        constexpr uptr resultF10 = hud::memory::align_address(0x0000000F, 0x10);
        hud_assert_eq(resultF10, uptr {0x00000010});
        constexpr uptr result1010 = hud::memory::align_address(0x00000010, 0x10);
        hud_assert_eq(result1010, uptr {0x00000010});
    }
}

GTEST_TEST(memory, is_address_aligned)
{

    // Non constant
    {
        bool result11 = hud::memory::is_address_aligned(0x00000001, 1);
        hud_assert_true(result11);
        bool result21 = hud::memory::is_address_aligned(0x00000002, 1);
        hud_assert_true(result21);
        bool result31 = hud::memory::is_address_aligned(0x00000003, 1);
        hud_assert_true(result31);
        bool result41 = hud::memory::is_address_aligned(0x00000004, 1);
        hud_assert_true(result41);
        bool result51 = hud::memory::is_address_aligned(0x00000005, 1);
        hud_assert_true(result51);
        bool result61 = hud::memory::is_address_aligned(0x00000006, 1);
        hud_assert_true(result61);
        bool result71 = hud::memory::is_address_aligned(0x00000007, 1);
        hud_assert_true(result71);
        bool result81 = hud::memory::is_address_aligned(0x00000008, 1);
        hud_assert_true(result81);
        bool result91 = hud::memory::is_address_aligned(0x00000009, 1);
        hud_assert_true(result91);
        bool resultA1 = hud::memory::is_address_aligned(0x0000000A, 1);
        hud_assert_true(resultA1);
        bool resultB1 = hud::memory::is_address_aligned(0x0000000B, 1);
        hud_assert_true(resultB1);
        bool resultC1 = hud::memory::is_address_aligned(0x0000000C, 1);
        hud_assert_true(resultC1);
        bool resultD1 = hud::memory::is_address_aligned(0x0000000D, 1);
        hud_assert_true(resultD1);
        bool resultE1 = hud::memory::is_address_aligned(0x0000000E, 1);
        hud_assert_true(resultE1);
        bool resultF1 = hud::memory::is_address_aligned(0x0000000F, 1);
        hud_assert_true(resultF1);
        bool result101 = hud::memory::is_address_aligned(0x00000010, 1);
        hud_assert_true(result101);

        bool result14 = hud::memory::is_address_aligned(0x00000001, 4);
        hud_assert_false(result14);
        bool result24 = hud::memory::is_address_aligned(0x00000002, 4);
        hud_assert_false(result24);
        bool result34 = hud::memory::is_address_aligned(0x00000003, 4);
        hud_assert_false(result34);
        bool result44 = hud::memory::is_address_aligned(0x00000004, 4);
        hud_assert_true(result44);
        bool result54 = hud::memory::is_address_aligned(0x00000005, 4);
        hud_assert_false(result54);
        bool result64 = hud::memory::is_address_aligned(0x00000006, 4);
        hud_assert_false(result64);
        bool result74 = hud::memory::is_address_aligned(0x00000007, 4);
        hud_assert_false(result74);
        bool result84 = hud::memory::is_address_aligned(0x00000008, 4);
        hud_assert_true(result84);
        bool result94 = hud::memory::is_address_aligned(0x00000009, 4);
        hud_assert_false(result94);
        bool resultA4 = hud::memory::is_address_aligned(0x0000000A, 4);
        hud_assert_false(resultA4);
        bool resultB4 = hud::memory::is_address_aligned(0x0000000B, 4);
        hud_assert_false(resultB4);
        bool resultC4 = hud::memory::is_address_aligned(0x0000000C, 4);
        hud_assert_true(resultC4);
        bool resultD4 = hud::memory::is_address_aligned(0x0000000D, 4);
        hud_assert_false(resultD4);
        bool resultE4 = hud::memory::is_address_aligned(0x0000000E, 4);
        hud_assert_false(resultE4);
        bool resultF4 = hud::memory::is_address_aligned(0x0000000F, 4);
        hud_assert_false(resultF4);
        bool result104 = hud::memory::is_address_aligned(0x00000010, 4);
        hud_assert_true(result104);

        bool result18 = hud::memory::is_address_aligned(0x00000001, 8);
        hud_assert_false(result18);
        bool result28 = hud::memory::is_address_aligned(0x00000002, 8);
        hud_assert_false(result28);
        bool result38 = hud::memory::is_address_aligned(0x00000003, 8);
        hud_assert_false(result38);
        bool result48 = hud::memory::is_address_aligned(0x00000004, 8);
        hud_assert_false(result48);
        bool result58 = hud::memory::is_address_aligned(0x00000005, 8);
        hud_assert_false(result58);
        bool result68 = hud::memory::is_address_aligned(0x00000006, 8);
        hud_assert_false(result68);
        bool result78 = hud::memory::is_address_aligned(0x00000007, 8);
        hud_assert_false(result78);
        bool result88 = hud::memory::is_address_aligned(0x00000008, 8);
        hud_assert_true(result88);
        bool result98 = hud::memory::is_address_aligned(0x00000009, 8);
        hud_assert_false(result98);
        bool resultA8 = hud::memory::is_address_aligned(0x0000000A, 8);
        hud_assert_false(resultA8);
        bool resultB8 = hud::memory::is_address_aligned(0x0000000B, 8);
        hud_assert_false(resultB8);
        bool resultC8 = hud::memory::is_address_aligned(0x0000000C, 8);
        hud_assert_false(resultC8);
        bool resultD8 = hud::memory::is_address_aligned(0x0000000D, 8);
        hud_assert_false(resultD8);
        bool resultE8 = hud::memory::is_address_aligned(0x0000000E, 8);
        hud_assert_false(resultE8);
        bool resultF8 = hud::memory::is_address_aligned(0x0000000F, 8);
        hud_assert_false(resultF8);
        bool result108 = hud::memory::is_address_aligned(0x00000010, 8);
        hud_assert_true(result108);

        bool result1C = hud::memory::is_address_aligned(0x00000001, 0xC);
        hud_assert_false(result1C);
        bool result2C = hud::memory::is_address_aligned(0x00000002, 0xC);
        hud_assert_false(result2C);
        bool result3C = hud::memory::is_address_aligned(0x00000003, 0xC);
        hud_assert_false(result3C);
        bool result4C = hud::memory::is_address_aligned(0x00000004, 0xC);
        hud_assert_true(result4C);
        bool result5C = hud::memory::is_address_aligned(0x00000005, 0xC);
        hud_assert_false(result5C);
        bool result6C = hud::memory::is_address_aligned(0x00000006, 0xC);
        hud_assert_false(result6C);
        bool result7C = hud::memory::is_address_aligned(0x00000007, 0xC);
        hud_assert_false(result7C);
        bool result8C = hud::memory::is_address_aligned(0x00000008, 0xC);
        hud_assert_false(result8C);
        bool result9C = hud::memory::is_address_aligned(0x00000009, 0xC);
        hud_assert_false(result9C);
        bool resultAC = hud::memory::is_address_aligned(0x0000000A, 0xC);
        hud_assert_false(resultAC);
        bool resultBC = hud::memory::is_address_aligned(0x0000000B, 0xC);
        hud_assert_false(resultBC);
        bool resultCC = hud::memory::is_address_aligned(0x0000000C, 0xC);
        hud_assert_false(resultCC);
        bool resultDC = hud::memory::is_address_aligned(0x0000000D, 0xC);
        hud_assert_false(resultDC);
        bool resultEC = hud::memory::is_address_aligned(0x0000000E, 0xC);
        hud_assert_false(resultEC);
        bool resultFC = hud::memory::is_address_aligned(0x0000000F, 0xC);
        hud_assert_false(resultFC);
        bool result10C = hud::memory::is_address_aligned(0x00000010, 0xC);
        hud_assert_true(result10C);

        bool result110 = hud::memory::is_address_aligned(0x00000001, 0x10);
        hud_assert_false(result110);
        bool result210 = hud::memory::is_address_aligned(0x00000002, 0x10);
        hud_assert_false(result210);
        bool result310 = hud::memory::is_address_aligned(0x00000003, 0x10);
        hud_assert_false(result310);
        bool result410 = hud::memory::is_address_aligned(0x00000004, 0x10);
        hud_assert_false(result410);
        bool result510 = hud::memory::is_address_aligned(0x00000005, 0x10);
        hud_assert_false(result510);
        bool result610 = hud::memory::is_address_aligned(0x00000006, 0x10);
        hud_assert_false(result610);
        bool result710 = hud::memory::is_address_aligned(0x00000007, 0x10);
        hud_assert_false(result710);
        bool result810 = hud::memory::is_address_aligned(0x00000008, 0x10);
        hud_assert_false(result810);
        bool result910 = hud::memory::is_address_aligned(0x00000009, 0x10);
        hud_assert_false(result910);
        bool resultA10 = hud::memory::is_address_aligned(0x0000000A, 0x10);
        hud_assert_false(resultA10);
        bool resultB10 = hud::memory::is_address_aligned(0x0000000B, 0x10);
        hud_assert_false(resultB10);
        bool resultC10 = hud::memory::is_address_aligned(0x0000000C, 0x10);
        hud_assert_false(resultC10);
        bool resultD10 = hud::memory::is_address_aligned(0x0000000D, 0x10);
        hud_assert_false(resultD10);
        bool resultE10 = hud::memory::is_address_aligned(0x0000000E, 0x10);
        hud_assert_false(resultE10);
        bool resultF10 = hud::memory::is_address_aligned(0x0000000F, 0x10);
        hud_assert_false(resultF10);
        bool result1010 = hud::memory::is_address_aligned(0x00000010, 0x10);
        hud_assert_true(result1010);
    }

    // Constant
    {
        constexpr bool result11 = hud::memory::is_address_aligned(0x00000001, 1);
        hud_assert_true(result11);
        constexpr bool result21 = hud::memory::is_address_aligned(0x00000002, 1);
        hud_assert_true(result21);
        constexpr bool result31 = hud::memory::is_address_aligned(0x00000003, 1);
        hud_assert_true(result31);
        constexpr bool result41 = hud::memory::is_address_aligned(0x00000004, 1);
        hud_assert_true(result41);
        constexpr bool result51 = hud::memory::is_address_aligned(0x00000005, 1);
        hud_assert_true(result51);
        constexpr bool result61 = hud::memory::is_address_aligned(0x00000006, 1);
        hud_assert_true(result61);
        constexpr bool result71 = hud::memory::is_address_aligned(0x00000007, 1);
        hud_assert_true(result71);
        constexpr bool result81 = hud::memory::is_address_aligned(0x00000008, 1);
        hud_assert_true(result81);
        constexpr bool result91 = hud::memory::is_address_aligned(0x00000009, 1);
        hud_assert_true(result91);
        constexpr bool resultA1 = hud::memory::is_address_aligned(0x0000000A, 1);
        hud_assert_true(resultA1);
        constexpr bool resultB1 = hud::memory::is_address_aligned(0x0000000B, 1);
        hud_assert_true(resultB1);
        constexpr bool resultC1 = hud::memory::is_address_aligned(0x0000000C, 1);
        hud_assert_true(resultC1);
        constexpr bool resultD1 = hud::memory::is_address_aligned(0x0000000D, 1);
        hud_assert_true(resultD1);
        constexpr bool resultE1 = hud::memory::is_address_aligned(0x0000000E, 1);
        hud_assert_true(resultE1);
        constexpr bool resultF1 = hud::memory::is_address_aligned(0x0000000F, 1);
        hud_assert_true(resultF1);
        constexpr bool result101 = hud::memory::is_address_aligned(0x00000010, 1);
        hud_assert_true(result101);

        constexpr bool result14 = hud::memory::is_address_aligned(0x00000001, 4);
        hud_assert_false(result14);
        constexpr bool result24 = hud::memory::is_address_aligned(0x00000002, 4);
        hud_assert_false(result24);
        constexpr bool result34 = hud::memory::is_address_aligned(0x00000003, 4);
        hud_assert_false(result34);
        constexpr bool result44 = hud::memory::is_address_aligned(0x00000004, 4);
        hud_assert_true(result44);
        constexpr bool result54 = hud::memory::is_address_aligned(0x00000005, 4);
        hud_assert_false(result54);
        constexpr bool result64 = hud::memory::is_address_aligned(0x00000006, 4);
        hud_assert_false(result64);
        constexpr bool result74 = hud::memory::is_address_aligned(0x00000007, 4);
        hud_assert_false(result74);
        constexpr bool result84 = hud::memory::is_address_aligned(0x00000008, 4);
        hud_assert_true(result84);
        constexpr bool result94 = hud::memory::is_address_aligned(0x00000009, 4);
        hud_assert_false(result94);
        constexpr bool resultA4 = hud::memory::is_address_aligned(0x0000000A, 4);
        hud_assert_false(resultA4);
        constexpr bool resultB4 = hud::memory::is_address_aligned(0x0000000B, 4);
        hud_assert_false(resultB4);
        constexpr bool resultC4 = hud::memory::is_address_aligned(0x0000000C, 4);
        hud_assert_true(resultC4);
        constexpr bool resultD4 = hud::memory::is_address_aligned(0x0000000D, 4);
        hud_assert_false(resultD4);
        constexpr bool resultE4 = hud::memory::is_address_aligned(0x0000000E, 4);
        hud_assert_false(resultE4);
        constexpr bool resultF4 = hud::memory::is_address_aligned(0x0000000F, 4);
        hud_assert_false(resultF4);
        constexpr bool result104 = hud::memory::is_address_aligned(0x00000010, 4);
        hud_assert_true(result104);

        constexpr bool result18 = hud::memory::is_address_aligned(0x00000001, 8);
        hud_assert_false(result18);
        constexpr bool result28 = hud::memory::is_address_aligned(0x00000002, 8);
        hud_assert_false(result28);
        constexpr bool result38 = hud::memory::is_address_aligned(0x00000003, 8);
        hud_assert_false(result38);
        constexpr bool result48 = hud::memory::is_address_aligned(0x00000004, 8);
        hud_assert_false(result48);
        constexpr bool result58 = hud::memory::is_address_aligned(0x00000005, 8);
        hud_assert_false(result58);
        constexpr bool result68 = hud::memory::is_address_aligned(0x00000006, 8);
        hud_assert_false(result68);
        constexpr bool result78 = hud::memory::is_address_aligned(0x00000007, 8);
        hud_assert_false(result78);
        constexpr bool result88 = hud::memory::is_address_aligned(0x00000008, 8);
        hud_assert_true(result88);
        constexpr bool result98 = hud::memory::is_address_aligned(0x00000009, 8);
        hud_assert_false(result98);
        constexpr bool resultA8 = hud::memory::is_address_aligned(0x0000000A, 8);
        hud_assert_false(resultA8);
        constexpr bool resultB8 = hud::memory::is_address_aligned(0x0000000B, 8);
        hud_assert_false(resultB8);
        constexpr bool resultC8 = hud::memory::is_address_aligned(0x0000000C, 8);
        hud_assert_false(resultC8);
        constexpr bool resultD8 = hud::memory::is_address_aligned(0x0000000D, 8);
        hud_assert_false(resultD8);
        constexpr bool resultE8 = hud::memory::is_address_aligned(0x0000000E, 8);
        hud_assert_false(resultE8);
        constexpr bool resultF8 = hud::memory::is_address_aligned(0x0000000F, 8);
        hud_assert_false(resultF8);
        constexpr bool result108 = hud::memory::is_address_aligned(0x00000010, 8);
        hud_assert_true(result108);

        constexpr bool result1C = hud::memory::is_address_aligned(0x00000001, 0xC);
        hud_assert_false(result1C);
        constexpr bool result2C = hud::memory::is_address_aligned(0x00000002, 0xC);
        hud_assert_false(result2C);
        constexpr bool result3C = hud::memory::is_address_aligned(0x00000003, 0xC);
        hud_assert_false(result3C);
        constexpr bool result4C = hud::memory::is_address_aligned(0x00000004, 0xC);
        hud_assert_true(result4C);
        constexpr bool result5C = hud::memory::is_address_aligned(0x00000005, 0xC);
        hud_assert_false(result5C);
        constexpr bool result6C = hud::memory::is_address_aligned(0x00000006, 0xC);
        hud_assert_false(result6C);
        constexpr bool result7C = hud::memory::is_address_aligned(0x00000007, 0xC);
        hud_assert_false(result7C);
        constexpr bool result8C = hud::memory::is_address_aligned(0x00000008, 0xC);
        hud_assert_false(result8C);
        constexpr bool result9C = hud::memory::is_address_aligned(0x00000009, 0xC);
        hud_assert_false(result9C);
        constexpr bool resultAC = hud::memory::is_address_aligned(0x0000000A, 0xC);
        hud_assert_false(resultAC);
        constexpr bool resultBC = hud::memory::is_address_aligned(0x0000000B, 0xC);
        hud_assert_false(resultBC);
        constexpr bool resultCC = hud::memory::is_address_aligned(0x0000000C, 0xC);
        hud_assert_false(resultCC);
        constexpr bool resultDC = hud::memory::is_address_aligned(0x0000000D, 0xC);
        hud_assert_false(resultDC);
        constexpr bool resultEC = hud::memory::is_address_aligned(0x0000000E, 0xC);
        hud_assert_false(resultEC);
        constexpr bool resultFC = hud::memory::is_address_aligned(0x0000000F, 0xC);
        hud_assert_false(resultFC);
        constexpr bool result10C = hud::memory::is_address_aligned(0x00000010, 0xC);
        hud_assert_true(result10C);

        constexpr bool result110 = hud::memory::is_address_aligned(0x00000001, 0x10);
        hud_assert_false(result110);
        constexpr bool result210 = hud::memory::is_address_aligned(0x00000002, 0x10);
        hud_assert_false(result210);
        constexpr bool result310 = hud::memory::is_address_aligned(0x00000003, 0x10);
        hud_assert_false(result310);
        constexpr bool result410 = hud::memory::is_address_aligned(0x00000004, 0x10);
        hud_assert_false(result410);
        constexpr bool result510 = hud::memory::is_address_aligned(0x00000005, 0x10);
        hud_assert_false(result510);
        constexpr bool result610 = hud::memory::is_address_aligned(0x00000006, 0x10);
        hud_assert_false(result610);
        constexpr bool result710 = hud::memory::is_address_aligned(0x00000007, 0x10);
        hud_assert_false(result710);
        constexpr bool result810 = hud::memory::is_address_aligned(0x00000008, 0x10);
        hud_assert_false(result810);
        constexpr bool result910 = hud::memory::is_address_aligned(0x00000009, 0x10);
        hud_assert_false(result910);
        constexpr bool resultA10 = hud::memory::is_address_aligned(0x0000000A, 0x10);
        hud_assert_false(resultA10);
        constexpr bool resultB10 = hud::memory::is_address_aligned(0x0000000B, 0x10);
        hud_assert_false(resultB10);
        constexpr bool resultC10 = hud::memory::is_address_aligned(0x0000000C, 0x10);
        hud_assert_false(resultC10);
        constexpr bool resultD10 = hud::memory::is_address_aligned(0x0000000D, 0x10);
        hud_assert_false(resultD10);
        constexpr bool resultE10 = hud::memory::is_address_aligned(0x0000000E, 0x10);
        hud_assert_false(resultE10);
        constexpr bool resultF10 = hud::memory::is_address_aligned(0x0000000F, 0x10);
        hud_assert_false(resultF10);
        constexpr bool result1010 = hud::memory::is_address_aligned(0x00000010, 0x10);
        hud_assert_true(result1010);
    }
}

GTEST_TEST(memory, align_pointer)
{

    // Add the header and the maximum padding tested to ensure we have enough memory when
    // hud::memory::align_pointer write alignement and pointer informations
    // align_pointer relies on align_address for alignement
    // Memory pattern bis the following: AlignmentPadding|AllocationSize|UnalignPointer|AlignPointer
    constexpr usize buffer_size = 0x10 + hud::memory::ALIGNED_MALLOC_HEADER_SIZE;
    u8 buffer_allocated[buffer_size];
    void *aligned_pointer = hud::memory::align_pointer(buffer_allocated, buffer_size, 1);
    hud_assert_true(hud::memory::is_pointer_aligned(aligned_pointer, 1));
    hud_assert_eq(*reinterpret_cast<uptr *>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    hud_assert_eq(*reinterpret_cast<usize *>((uptr)aligned_pointer - sizeof(usize) - sizeof(void *)), buffer_size);

    aligned_pointer = hud::memory::align_pointer(buffer_allocated, buffer_size, 2);
    hud_assert_true(hud::memory::is_pointer_aligned(aligned_pointer, 2));
    hud_assert_eq(*reinterpret_cast<uptr *>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    hud_assert_eq(*reinterpret_cast<usize *>((uptr)aligned_pointer - sizeof(usize) - sizeof(void *)), buffer_size);

    aligned_pointer = hud::memory::align_pointer(buffer_allocated, buffer_size, 4);
    hud_assert_true(hud::memory::is_pointer_aligned(aligned_pointer, 4));
    hud_assert_eq(*reinterpret_cast<uptr *>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    hud_assert_eq(*reinterpret_cast<usize *>((uptr)aligned_pointer - sizeof(usize) - sizeof(void *)), buffer_size);

    aligned_pointer = hud::memory::align_pointer(buffer_allocated, buffer_size, 8);
    hud_assert_true(hud::memory::is_pointer_aligned(aligned_pointer, 8));
    hud_assert_eq(*reinterpret_cast<uptr *>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    hud_assert_eq(*reinterpret_cast<usize *>((uptr)aligned_pointer - sizeof(usize) - sizeof(void *)), buffer_size);

    aligned_pointer = hud::memory::align_pointer(buffer_allocated, buffer_size, 0xC);
    hud_assert_true(hud::memory::is_pointer_aligned(aligned_pointer, 0xC));
    hud_assert_eq(*reinterpret_cast<uptr *>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    hud_assert_eq(*reinterpret_cast<usize *>((uptr)aligned_pointer - sizeof(usize) - sizeof(void *)), buffer_size);

    aligned_pointer = hud::memory::align_pointer(buffer_allocated, buffer_size, 0x10);
    hud_assert_true(hud::memory::is_pointer_aligned(aligned_pointer, 0x10));
    hud_assert_eq(*reinterpret_cast<uptr *>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    hud_assert_eq(*reinterpret_cast<usize *>((uptr)aligned_pointer - sizeof(usize) - sizeof(void *)), buffer_size);
}

GTEST_TEST(memory, is_pointer_aligned)
{

    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000001), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000002), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000003), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000004), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000005), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000006), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000007), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000008), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000009), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000A), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000B), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000C), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000D), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000E), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000F), 1));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000010), 1));

    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000001), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000002), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000003), 4));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000004), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000005), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000006), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000007), 4));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000008), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000009), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000A), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000B), 4));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000C), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000D), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000E), 4));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000F), 4));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000010), 4));

    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000001), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000002), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000003), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000004), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000005), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000006), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000007), 8));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000008), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000009), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000A), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000B), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000C), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000D), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000E), 8));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000F), 8));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000010), 8));

    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000001), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000002), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000003), 0xC));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000004), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000005), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000006), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000007), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000008), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000009), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000A), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000B), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000C), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000D), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000E), 0xC));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000F), 0xC));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000010), 0xC));

    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000001), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000002), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000003), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000004), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000005), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000006), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000007), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000008), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000009), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000A), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000B), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000C), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000D), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000E), 0x10));
    hud_assert_false(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x0000000F), 0x10));
    hud_assert_true(hud::memory::is_pointer_aligned(reinterpret_cast<void *>(0x00000010), 0x10));
}
